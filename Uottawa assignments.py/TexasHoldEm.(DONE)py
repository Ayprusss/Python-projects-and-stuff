import random

###################################### PARENTCLASS - POKERGAME(START) ########################################
class PokerGame:
    def __init__(self, players = 2):
        rank = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13] # 11, 12, 13, and 1 are respectively: 'J', 'Q', 'K', 'A'
        suit = ['D', 'C', 'S', 'H']
        self.players = players # initializes number of players within the game
        tableHands = [] # all players' hands that are present on the table.

        for i in range(0, players):
            playerhand = []
            tableHands.append(playerhand) #appends an empty list to the tableHands list; represents the player's hand and how many players are on the table. 

        self.playerHands = tableHands

        deck = []
        x = 0
        while x != 52: #52 cards in a single deck.
            card = [] #to find the one card to be put into the deck
            card.append(rank[random.randint(0, len(rank) - 1)]) #picks out a random rank for the card
            card.append(suit[random.randint(0, len(suit) - 1)]) # picks out a random suit for the card
            if card not in deck: # checks if card is not in the deck; it's unique.
                deck.append(card) # puts the card into the deck
                x += 1 # upped the count of how many cards are in the deck.

        self.deck = deck
        table = [] # table is the table in which cards are to be presented for players to get best combination.
        self.table = table 
    
    def add_card(self,index): # function is asking for player with the index to have the card on top of the deck be added to the player's hand. Need to create a deck before doing this.
        #adding a card into someone's hand would also remove a card from the deck list. Len must change as well as the deck itself. 
        decklist= self.deck
        card = decklist[0]
        self.playerHands[index - 1].append(card)
        self.deck.remove(card)
        random.shuffle(self.deck)
        #print('deck now:', self.deck)
        '''for j in range(0, players):
            playerhand = []
            for i in range(0, 5): # five cards put into the player's hands
                card = []
                rankval = random.randint(0, len(rank) - 1)
                suitval = random.randint(0, len(suit) - 1)
                card.append(rank[rankval])
                card.append(suit[suitval])
                playerhand.append(card)
            
            tableCards.append(playerhand)
        self.playerCards = tableCards
        # I DIDN'T NEED TO DO ALL OF THIS ;-; NEED TO INPUT AN EMPTY LIST FOR EACH PLAYER, NOT TO GIVE THEM CARDS AT ALL'''

    def print_hand(self, index): #DEBUGGING OPERATOR
        return print('Player', str(index)+ "'s", 'hand:', self.playerHands[index - 1])

    def add_to_table(self): # to add a card to the table
        decklist = self.deck #grabs the deck of cards with the remaining cards
        card = decklist[0] # picks out the first card of the deck
        self.table.append(card) #places the card onto the table
        self.deck.remove(card) # removes card from the deck. 

    def print_table(self):#DEBUGGING OPERATOR
        return print('table:', self.table)
    
    def print_deck(self):#DEBUGGING OPERATOR
        return print('deck:', self.deck)
    
    '''def rankConversion(self, letter):
        if letter == 'A':
            return 1
        elif letter == 'T':
            return 10
        elif letter == 'J':
            return 11
        elif letter == 'Q':
            return 12
        elif letter == 'K':
            return 13
        else: 
            return letter'''

    # purpose: to find out five cards are in increasing order, with the same suit for straight flush. 
    #parameter: 
    #self - to call for functions in child class
    #list - for list of cards to be inputed into function
    def IsStraightFlush(self, list): # suit would be the same, but order of cards would be in increasing order or would have cards in increasing order. 
        IsStraight = False
        numList = []
        for a in range(0, len(list)):
            val1 = list[a][0]
            numList.append(val1) # appends all values in order to set them and make sure they are in ascending order in increments of one

        sortedList = sorted(numList)
        straight = 0
        for b in range(1, len(numList)):
            if sortedList[b] == sortedList[b - 1] + 1:
                straight += 1
                
        if straight == 5:
            IsStraight = True

        IsFlush = False
        Dcount = 0
        Hcount = 0
        Acount = 0
        Scount = 0
        for a in range(0, len(list)):
            suit1 = list[a][1] # calls for suit of first card.
            if suit1 == 'H':
                Hcount += 1
            elif suit1 == 'D':
                Dcount += 1
            elif suit1 == 'A':
                Acount += 1
            elif suit1 == 'S':
                Scount += 1
        
        if Dcount == 5 or Hcount == 5 or Acount == 5 or Scount == 5:
            IsFlush = True

        if IsStraight == True and IsFlush == True:
            return True
        else:
            return False

    def IsFourOfaKind(self, list): # four cards with the same rank;
        vals = []
        for a in range(0, len(list)):
            val1 = list[a][0]
            vals.append(val1)
    
        print(vals)

        for b in range(0, len(vals)):
            if vals.count(vals[b]) == 4:
                return True
    
        return False
        
    def IsFlush(self, list): # all five cards have the same suit. DEBUG
        Dcount = 0
        Hcount = 0
        Acount = 0
        Scount = 0
        for a in range(0, len(list)):
            suit1 = list[a][1] # calls for suit of first card.
            if suit1 == 'H':
                Hcount += 1
            elif suit1 == 'D':
                Dcount += 1
            elif suit1 == 'A':
                Acount += 1
            elif suit1 == 'S':
                Scount += 1
        
        if Dcount == 5 or Hcount == 5 or Acount == 5 or Scount == 5:
            return True
        else:
            return False

    def IsThreeOfaKind(self, list): #DEBUG
        for a in range(0, len(list)):
            val1 = list[a][0]
            sameval = 0
            for b in range(1, len(list)):
                val2 = list[b][0]
                if val1 == val2:
                    sameval += 1

            
            if sameval == 3:
                return True
    
        return False

    
    def IsFullHouse(self, list):
        Dcount = 0
        Hcount = 0
        Acount = 0
        Scount = 0
        for a in range(0, len(list)):
            suit1 = list[a][1] # calls for suit of first card.
            if suit1 == 'H':
                Hcount += 1
            elif suit1 == 'D':
                Dcount += 1
            elif suit1 == 'A':
                Acount += 1
            elif suit1 == 'S':
                Scount += 1
        
        if Dcount == 3 or Hcount == 3 or Acount == 3 or Scount == 3:
            if Dcount == 2 or Hcount == 2 or Scount == 2 or Acount == 2:
                return True
            else:
                return False
            
        
    def IsStraight(self, list): # when all five cards ranks are in ascending order; list may not be in ascending order itself thhough. 
        numList = []
        for a in range(0, len(list)):
            val1 = list[a][0]
            numList.append(val1) # appends all values in order to set them and make sure they are in ascending order in increments of one

        sortedList = sorted(numList)
        Straight = 0
        for b in range(1, len(numList)):
            if sortedList[b] == sortedList[b - 1] + 1:
                Straight += 1
            
        if Straight == 5:
            return True
        
        return False
    
    def IsTwoPairs(self, list): # find four cards; two cards have the same rank, no care for suit
        valList = []
        for a in range(len(list)):
            val = list[a][0]
            valList.append(val)
    
        pairs = 0
        plusValues = []
        for a in range(len(valList)):
            num = valList[a]
            if num not in plusValues:
                if valList.count(num) == 2:
                    pairs += 1
                plusValues.append(num)

            if pairs == 2:
                return True
    
        return False

    def isOnePair(self, list):
        values = []
        for a in range(0, len(list)):
            val1 = list[a][0]
            values.append(val1)
    
        for b in range(0, len(values)):
            if values.count(values[b]) == 2:
                return True
        
        return False
###################################### PARENTCLASS - POKERGAME(END) ########################################



#Need to make child class. 
###################################### CHILD CLASS - TEXASHOLDEM(START) ########################################
class TexasHoldEm(PokerGame):
    def __init__(self, players = 2):
        super().__init__(players)
    
    def deal(self):
        for i in range(1, self.players + 1):
            for q in range(0, 2):
                self.add_card(i)
        
        j = 0
        while j != 5:
            self.add_to_table()
            j += 1
            
    
    def hands(self):
        combs = []
        for i in range(0, len(self.playerHands)):
            Hand = self.playerHands[i]
            cards = []

            for p in range(0, len(self.table)):
                cards.append(self.table[p])
            
            for j in range(0, len(Hand)):
                val = Hand[j]
                cards.append(val) # list now has the table cards and the player's cards are in a list.
                

            combsList = [self.IsStraightFlush(cards),self.IsFourOfaKind(cards), self.IsFullHouse(cards), self.IsFlush(cards), self.IsStraight(cards), self.IsThreeOfaKind(cards), self.IsTwoPairs(cards), self.isOnePair(cards)]
            combsAnswer = ['Straight Flush / Royal Flush.', 'Four of a Kind', 'Full House.', 'Flush', 'Straight.', 'Three of a Kind', 'Two Pairs', 'One Pair']
           
            for m in range(0, len(combsList)):
                function = combsList[m]
                if function: 
                    combs.append(combsAnswer[m])

                    break
            else:
                combs.append('High Card')

                
        
        print('combinations:', combs)

        #this part's unecessary: I did this shit for fun ;-;
        for a in range(0, len(self.playerHands)): # accesses all hands on the table.
            Hand = self.playerHands #accesses the specific player's hands.
            for b in range(0, len(Hand[a])):  #Hand[a] == The player's hands
                card = Hand[a][b][0] #to access each individual card of the player's hand
                if card == 10:
                    Hand[a][b].remove(10)
                    Hand[a][b].insert(0, 'T')
                elif card == 11:
                    Hand[a][b].remove(11)
                    Hand[a][b].insert(0, 'J')
                elif card == 12:
                    Hand[a][b].remove(12)
                    Hand[a][b].insert(0, 'Q')
                elif card == 13:
                    Hand[a][b].remove(13)
                    Hand[a][b].insert(0, 'K')
                elif card == 1:
                    Hand[a][b].remove(1)
                    Hand[a][b].insert(0, 'A')
                
            print('player', str(a + 1) + "'s", 'cards:', Hand[a])

        for c in range(0, len(self.table)):
            rank = self.table[c][0]
            if rank == 10:
                    self.table[c].remove(10)
                    self.table[c].insert(0, 'T')
            elif rank == 11:
                    self.table[c].remove(11)
                    self.table[c].insert(0, 'J')
            elif rank == 12:
                    self.table[c].remove(12)
                    self.table[c].insert(0, 'Q')
            elif rank == 13:
                    self.table[c].remove(13)
                    self.table[c].insert(0, 'K')
            elif rank == 1:
                    self.table[c].remove(1)
                    self.table[c].insert(0, 'A')
        
        print('Table:', self.table)

###################################### CHILD CLASS - TEXASHOLDEM(END) ########################################


### MAIN PROGRAM ###

T1 = TexasHoldEm(4)
T1.deal()
T1.hands()





